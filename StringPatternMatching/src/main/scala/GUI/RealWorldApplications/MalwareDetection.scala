package GUI.RealWorldApplications

import processing.core.PApplet
import API.searchAndMatch
import GUI.UTILS.DrawingUtils.{displayKeywords, prettyprint}

class MalwareDetection (parent : PApplet) {
  // Simulated content of a C++ program with potential malware signatures
  val cppFileContent =
    """#include <iostream>
      |#include <fstream>
      |#include <string>
      |#include <cstdlib>
      |
      |using namespace std;
      |
      |void exfiltrateData(const string& fileName) {
      |    // Simulating data exfiltration
      |    cout << "Uploading " << fileName << " to external server..." << endl;
      |}
      |
      |void encryptData(const string& fileName) {
      |    // Simulating encryption process
      |    cout << "Encrypting " << fileName << " with ransomware algorithm..." << endl;
      |    string key = "malware_key";
      |    cout << "Encryption complete. Key: " << key << endl;
      |}
      |
      |int main() {
      |    cout << "Initializing malicious payload..." << endl;
      |
      |    // Simulated suspicious behavior
      |    string sensitiveFile = "user_data.txt";
      |    fstream file(sensitiveFile, ios::in | ios::out);
      |
      |    if (!file.is_open()) {
      |        cerr << "Failed to open " << sensitiveFile << endl;
      |        return 1;
      |    }
      |
      |    // Ransomware behavior
      |    encryptData(sensitiveFile);
      |
      |    // Exfiltration
      |    exfiltrateData(sensitiveFile);
      |
      |    // Malicious network activity
      |    cout << "Establishing connection to external server..." << endl;
      |    cout << "Connection established. Transmitting data..." << endl;
      |
      |    cout << "Payload execution completed." << endl;
      |    return 0;
      |}
      |""".stripMargin
  val malwareSignatures = List(
    "ransomware",
    "encrypt",
    "malware",
    "key",
    "exfiltrate",
    "uploading",
    "server",
    "payload",
    "connection",
    "transmitting"
  )

  val MatchResults = searchAndMatch(cppFileContent, malwareSignatures)

  // Function to display the malware detection example
  def displayMalwareDetectionExample(parent: PApplet): Unit = {
    displayKeywords(parent,malwareSignatures,1000,250,17)
    val yPosition = 150
    val xPosition = 50
    val lineHeight = 20 // Adjust spacing between lines

    parent.textAlign(0, 0) // Left align text
    parent.fill(0) // Set text color to black
    parent.textSize(16)

    // Title
    parent.text("Malware Signature Detection Example using Aho-Corasick:", xPosition, yPosition)

    // Description
    parent.textSize(16)
    parent.text(
      "Below is a simulated C++ program. Detected malware signatures are highlighted to show how the Aho-Corasick algorithm identifies them in code.",
      xPosition,
      yPosition + 30
    )

    // Display the file content
    parent.fill(0)
    parent.text("C++ File Content:", xPosition, yPosition + 60)
    parent.textSize(14)

    // Split the content into lines and initialize rendering position
    val lines = cppFileContent.split("\n")
    var currentY = yPosition + 90
    parent.textSize(12)

    prettyprint(parent, MatchResults, cppFileContent, xPosition, currentY, 15, 800)
    displayMalInfo(parent,900,550)

  }

  /**
   * Displays a brief explanation about Aho-Corasick's application in malware detection.
   *
   * @param parent    The PApplet canvas to render the text on
   * @param xPosition X coordinate for rendering the text
   * @param yPosition Y coordinate for rendering the text
   */
  def displayMalInfo(parent: PApplet, xPosition: Float, yPosition: Float): Unit = {
    parent.textSize(16) // Title size
    parent.fill(0) // Black color
    parent.text("Malware Detection with Aho-Corasick", xPosition, yPosition)

    parent.textSize(14) // Body text size
    val infoText =
      """The Aho-Corasick algorithm is a powerful tool for malware detection.
        |It can efficiently find specific keywords or patterns, enabling fast
        |and reliable identification of common malware behaviors. By scanning
        |code or logs for suspicious terms, Aho-Corasick helps uncover threats
        |and ensure system security.""".stripMargin

    parent.text(infoText, xPosition, yPosition + 30, 400, 200) // Width and height to wrap the text
  }

}